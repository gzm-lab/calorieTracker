#!/usr/bin/env python3
"""
Script pour ins√©rer des donn√©es de test dans la base de donn√©es
"""
import asyncio
import os
import random
from datetime import datetime, timedelta
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import User, Meal
from db import sync_engine
from passlib.context import CryptContext

# Configuration pour le hashage des mots de passe
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def generate_random_meal_data(meal_type):
    """G√©n√®re des donn√©es de repas al√©atoires mais r√©alistes pour un type donn√©"""
    meal_names = {
        "breakfast": ["Petit d√©jeuner", "Breakfast", "D√©jeuner matinal"],
        "lunch": ["D√©jeuner", "Lunch", "Repas de midi"],
        "dinner": ["D√Æner", "Dinner", "Repas du soir"]
    }
    meal_descriptions = {
        "breakfast": [
            "Yaourt grec + fruits", "Omelette + avocat + toast", "C√©r√©ales + lait + banane",
            "Shake prot√©in√© + flocons d'avoine", "Th√© + biscottes + confiture",
            "Pancakes + sirop d'√©rable + bacon", "Pain au chocolat + caf√© au lait",
            "Smoothie bowl + granola", "Tartines + beurre + confiture", "≈íufs brouill√©s + saumon"
        ],
        "lunch": [
            "Poulet grill√© + riz + l√©gumes", "Burger + frites", "Salade compos√©e + lentilles",
            "P√¢tes carbonara + salade", "Poisson blanc + riz basmati + l√©gumes",
            "Pizza margherita + soda", "Salade ni√ßoise + baguette", "Quiche lorraine + salade",
            "Sushi + soupe miso", "Tacos + guacamole", "Risotto aux champignons"
        ],
        "dinner": [
            "Soupe de l√©gumes + pain complet", "Saumon + quinoa + brocoli", "Smoothie prot√©in√© + noix",
            "Steak + pommes de terre + haricots", "Curry de l√©gumes + riz complet",
            "Soupe miso + sushi", "Lasagnes + salade verte", "Poulet r√¥ti + l√©gumes",
            "P√¢tes aux fruits de mer", "Salade compos√©e + fromage", "Soupe √† l'oignon + cro√ªtons"
        ]
    }
    
    name = random.choice(meal_names[meal_type])
    description = random.choice(meal_descriptions[meal_type])
    
    # G√©n√©rer des macros r√©alistes selon le type de repas
    if meal_type == "breakfast":
        calories = random.randint(250, 600)
        proteins = random.randint(15, 40)
        carbohydrates = random.randint(30, 80)
        fats = random.randint(8, 35)
        fiber = random.randint(5, 15)
    elif meal_type == "lunch":
        calories = random.randint(450, 850)
        proteins = random.randint(25, 55)
        carbohydrates = random.randint(50, 100)
        fats = random.randint(15, 45)
        fiber = random.randint(8, 25)
    else:  # dinner
        calories = random.randint(350, 700)
        proteins = random.randint(20, 50)
        carbohydrates = random.randint(40, 80)
        fats = random.randint(10, 35)
        fiber = random.randint(8, 22)
    
    return {
        "name": name,
        "description": description,
        "calories": calories,
        "proteins": proteins,
        "carbohydrates": carbohydrates,
        "fats": fats,
        "fiber": fiber,
        "meal_type": meal_type
    }

async def create_test_user():
    """Cr√©er un utilisateur de test"""
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=sync_engine)
    session = SessionLocal()
    
    try:
        # Supprimer l'ancien utilisateur de test s'il existe
        existing_user = session.query(User).filter(User.email == "test@example.com").first()
        if existing_user:
            print(f"üóëÔ∏è Suppression de l'ancien utilisateur de test (ID: {existing_user.id})")
            session.delete(existing_user)
            session.commit()
        
        # Cr√©er un nouvel utilisateur de test avec le bon mot de passe hash√©
        hashed_password = pwd_context.hash("test123")
        test_user = User(
            email="test@example.com",
            hashed_password=hashed_password,
            is_active=True,
            is_superuser=False,
            is_verified=True
        )
        session.add(test_user)
        session.commit()
        session.refresh(test_user)
        print(f"‚úÖ Utilisateur de test cr√©√© (ID: {test_user.id})")
        print(f"üìß Email: test@example.com")
        print(f"üîë Mot de passe: test123")
        return test_user.id
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'utilisateur: {e}")
        session.rollback()
        return None
    finally:
        session.close()

async def insert_test_meals(user_id: int):
    """Ins√©rer les repas de test pour 33 jours"""
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=sync_engine)
    session = SessionLocal()
    
    try:
        # Supprimer les anciens repas de test pour cet utilisateur
        existing_meals = session.query(Meal).filter(Meal.user_id == user_id).all()
        if existing_meals:
            print(f"üóëÔ∏è Suppression de {len(existing_meals)} anciens repas de test")
            for meal in existing_meals:
                session.delete(meal)
            session.commit()
        
        # Cr√©er les repas sur les 33 derniers jours
        base_date = datetime.now() - timedelta(days=33)
        total_meals = 0
        
        print(f"üìÖ G√©n√©ration des repas du {base_date.strftime('%d/%m/%Y')} au {datetime.now().strftime('%d/%m/%Y')}")
        
        for day in range(33):
            meal_date = base_date + timedelta(days=day)
            day_meals = 0
            
            # G√©n√©rer 3 repas par jour (petit d√©jeuner, d√©jeuner, d√Æner)
            for meal_type in ["breakfast", "lunch", "dinner"]:
                meal_data = generate_random_meal_data(meal_type)
                
                meal = Meal(
                    user_id=user_id,
                    name=meal_data["name"],
                    description=meal_data["description"],
                    calories=meal_data["calories"],
                    proteins=meal_data["proteins"],
                    carbohydrates=meal_data["carbohydrates"],
                    fats=meal_data["fats"],
                    fiber=meal_data["fiber"],
                    meal_type=meal_data["meal_type"],
                    date=meal_date
                )
                session.add(meal)
                total_meals += 1
                day_meals += 1
            
            if day % 10 == 0:  # Log tous les 10 jours
                print(f"   Jour {day + 1}: {day_meals} repas g√©n√©r√©s")
        
        session.commit()
        print(f"‚úÖ {total_meals} repas de test ins√©r√©s avec succ√®s (33 jours √ó 3 repas)")
        print(f"üìÖ P√©riode: du {base_date.strftime('%d/%m/%Y')} au {datetime.now().strftime('%d/%m/%Y')}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'insertion des repas: {e}")
        session.rollback()
    finally:
        session.close()

async def main():
    """Fonction principale"""
    print("üå± D√©but de l'insertion des donn√©es de test...")
    
    # Cr√©er l'utilisateur de test
    user_id = await create_test_user()
    if not user_id:
        print("‚ùå Impossible de cr√©er l'utilisateur de test")
        return
    
    # Ins√©rer les repas de test
    await insert_test_meals(user_id)
    
    print("üéâ Insertion des donn√©es de test termin√©e !")
    print(f"üìß Email de test: test@example.com")
    print(f"üîë Mot de passe: test123")

if __name__ == "__main__":
    asyncio.run(main()) 